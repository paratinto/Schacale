' Gambas class file

id AS Integer
name AS String
deleted AS String
formula AS NEW String[]
weight AS Float
group AS String
hazard AS NEW String[]
description AS String
creator AS String
created AS Date

formula_correct AS Boolean

PUBLIC FUNCTION getID() AS Integer
  
  RETURN id
  
END


PUBLIC FUNCTION getName() AS String
  
  RETURN name
  
END

PUBLIC FUNCTION getDeleted() AS String
  
  RETURN deleted
  
END

PUBLIC FUNCTION getFormula() AS String
 DIM expstring AS String
 DIM i AS Integer
  
  IF formula <> NULL THEN 
  FOR i = 0 TO formula.Length - 1
    IF formula[i] <> "1" THEN expstring = expstring & formula[i]
  NEXT 
  ENDIF 
  
  RETURN expstring
  
END


PUBLIC FUNCTION getWeight() AS Float
  
  RETURN weight
  
END

PUBLIC FUNCTION getGroup() AS String
  
  RETURN group
  
END

PUBLIC FUNCTION getHazard() AS String
  
  RETURN hazard
  
END

PUBLIC FUNCTION getDescription() AS String
  
  RETURN description
  
END

PUBLIC FUNCTION getCreator() AS String
  
  RETURN creator
  
END

PUBLIC FUNCTION getCreated() AS Date
  
  RETURN created
  
END


PUBLIC SUB putID(newid AS Integer)

  id = newid
  
END


PUBLIC FUNCTION putName(inpstring AS String) AS Byte
  
  IF inpstring <> "" THEN
    name = inpstring
    RETURN 0
  ELSE 
    RETURN 1
  ENDIF 
END



PUBLIC FUNCTION putWeight(inpvalue AS Float) AS Byte
  
  IF inpvalue <> 0 THEN 
    weight = inpvalue
    RETURN 0
  ELSE 
    RETURN 1
  ENDIF 
  
END

FUNCTION scanFormula(expression AS String) AS String[] 'splits then entered formula and returns tokens

  DIM edited_exp AS String
  DIM tokens AS String[]
  DIM i, j AS Integer
  DIM atomtable AS Object
  DIM iscorrect AS Boolean
  
  atomtable = global.atomtable
  iscorrect = TRUE

  FOR i = 1 TO Len(expression)
    IF IsUpper(Mid(expression, i + 1, 1)) OR ((IsDigit(Mid(expression, i + 1, 1))) AND NOT (IsDigit(Mid(expression, i, 1))))
      edited_exp = edited_exp & Mid(expression, i, 1) & ","
    ELSE 
      edited_exp = edited_exp & Mid(expression, i, 1) 
    ENDIF 
  NEXT 
  
  tokens = Split(edited_exp, ",")
  tokens.Add("!")
  
  'check if expression (formula) is correct
  IF IsDigit(tokens[0]) THEN 
    iscorrect = FALSE
  ELSE 
  
    FOR j = 0 TO tokens.Length - 2
      IF NOT IsDigit(tokens[j]) AND atomtable.getWeight(tokens[j]) = 0 THEN iscorrect = FALSE
    NEXT 
  ENDIF 
  
  IF iscorrect = TRUE THEN RETURN tokens

END

FUNCTION buildMolComponents(tokens AS String[]) AS String[] 'returns a list of strings that is compatible to formula AS String[]
  DIM mc_out AS NEW String[]
  DIM i AS Integer
  
  IF formula_correct THEN 
    FOR i = 0 TO tokens.Length - 2
      IF (NOT IsDigit(tokens[i])) AND NOT (IsDigit(tokens[i + 1])) THEN 
        mc_out.Add(tokens[i])
        mc_out.add("1")
      ELSE 
        IF NOT (IsDigit(tokens[i])) THEN 
          mc_out.add(tokens[i])
          mc_out.add(tokens[i + 1])
        ENDIF 
      ENDIF 
    NEXT 
  ENDIF 
  RETURN mc_out
  
END

PUBLIC FUNCTION putFormula(inpstring AS String) AS Float
  
  DIM token_list AS String[]
  DIM i, j, k AS Integer
  DIM weight AS Float
  DIM atomtable AS Object
  
  atomtable = global.atomtable
  token_list = scanFormula(inpstring)
  weight = 0
  
  FOR i = 0 TO token_list.Length - 2 
    IF token_list[i + 1] <> "!" AND IsDigit(token_list[i + 1]) THEN 
      weight = weight + CInt(token_list[i + 1]) * atomtable.getweight(token_list[i])
    ELSE 
      IF NOT IsDigit(token_list[i]) THEN weight = weight + atomtable.getweight(token_list[i])
    ENDIF
    
  NEXT
  
  '  mass.Value = weight
    formula_correct = TRUE
    PRINT "entered correct formula: ", formula_correct
    formula = buildMolComponents(token_list)
    RETURN weight
    
  CATCH 
    ' mass.Value = 0
    formula_correct = FALSE
  '  Message.Warning("entered formula is wrong", "OK")
    PRINT "entered correct formula: ", formula_correct
    RETURN 0
END

PUBLIC SUB putMolcomp(inpstring AS String[])
  
  formula = inpstring
  
END


PUBLIC FUNCTION putGroup(inpstring AS String) AS Byte
  
  IF inpstring <> "" THEN 
    group = inpstring
    RETURN 0
  ELSE 
    RETURN 1 
  ENDIF 
  
END

PUBLIC FUNCTION putHazard(inpstringl AS String[]) AS Byte
  
  IF inpstringl <> NULL THEN 
    hazard = inpstringl
    RETURN 0
  ELSE 
    RETURN 1 
  ENDIF 
  
END

PUBLIC FUNCTION putDescription(inpstring AS String) AS Byte
  
  IF inpstring <> "" THEN 
    description = inpstring
    RETURN 0
  ELSE 
    RETURN 1 
  ENDIF 
  
END

PUBLIC SUB putCreator(inpstr AS String) AS Byte
  
  IF inpstr <> "" THEN 
    creator = inpstr
    RETURN 0
  ELSE 
    RETURN 1 
  ENDIF 
  
END

PUBLIC SUB putCreated(inpdate AS Date)

  created = inpdate
  
END

FUNCTION getCounter() AS Integer
  DIM oldcounter AS Result
   
   oldcounter = Global.dbcon.Find("counters")
   IF oldcounter.Length > 0 THEN
    FOR EACH oldcounter
      RETURN oldcounter!counter + 1
    NEXT
   ELSE 
    RETURN 0
   ENDIF 

END

SUB setCounter()
  DIM counter AS Result
  
  IF id > 0 THEN
    counter = Global.dbcon.edit("counters", "schacaledb = &1", "molecules")
    FOR EACH counter
      counter!schacaledb = "molecules"
      counter!counter = id
      counter.Update()
    NEXT
  ELSE 
   counter = Global.dbcon.Create("counters")
   counter!schacaledb = "molecules"
   counter!counter = id
   counter.Update()
  ENDIF 
  
END


PUBLIC FUNCTION createItemDB() AS Byte
  DIM rmolecule, rmolcomp AS Result
  DIM i AS Integer
  
  id = getCounter()
  PRINT getFormula()
  Global.dbcon.Begin()
    rmolecule = Global.dbcon.Create("molecules")
    rmolecule!id = id
    rmolecule!name = name
    FOR i = 0 TO formula.Length - 1 STEP 2
      rmolcomp = Global.dbcon.Create("molcomp")
      rmolcomp!id = id
      rmolcomp!symbol = formula[i]
      rmolcomp!count = formula[i + 1]
      rmolcomp.Update()
    NEXT 
    rmolecule!weight = weight
    rmolecule!group = group
    rmolecule!description = description
    FOR i = 0 TO hazard.Length - 1
      rmolcomp = Global.dbcon.Create("molhazard")
      rmolcomp!id = id
      rmolcomp!hazard = hazard[i]
      rmolcomp.Update()
    NEXT 
    rmolecule!creator = Global.user
    rmolecule!created = Date(Now)
    setCounter()
    rmolecule.Update()
  Global.dbcon.Commit()
  
END

PUBLIC FUNCTION deleteItemDB(seekid AS String) AS Byte
  DIM rmolecule AS Result
  
  rmolecule = Global.dbcon.edit("molecules", "id = &1", seekid)
  rmolecule!deleted = "d"
  rmolecule.Update
  RETURN 0
  
END

